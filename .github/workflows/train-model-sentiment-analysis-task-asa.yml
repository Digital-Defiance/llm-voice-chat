name: "train-model: Sentiment Analysis Amazon Reviews @ EC2 Spot"
on:
  workflow_dispatch:

env:
  AWS_REGION: eu-south-1
 
jobs:
  start-runner:
    name: "Start EC2 Spot Instance: g4dn.xlarge"
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ env.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: digital-defiance/ec2-github-runner@feature/add-storage-option
        with:
          mode: start
          root-volume-size: 50
          iam-role-name: ec2-logs
          pre-runner-script: |  # sudo yum update -y && sudo yum install docker git libicu -y
              sudo systemctl enable docker
              sudo systemctl start docker
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          market-type: spot
          ec2-image-id: ami-0d95b58c016382e64 # ami-00e9a577171a99277 # ami-02fbad1683bc61f9f
          ec2-instance-type: g4dn.xlarge
          subnet-id: subnet-0fc7dea0969cca860
          security-group-id: sg-0c4cc0c0be64f1b08

  download-data:
    name: Download data
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    steps:
      - name: Download data
        run: |
          mkdir /data
          curl -L https://github.com/Digital-Defiance/llm-voice-chat/releases/download/asa-v0.2.0/test.parquet -o /data/test.parquet
          curl -L https://github.com/Digital-Defiance/llm-voice-chat/releases/download/asa-v0.2.0/train.parquet -o /data/train.parquet

  training-loop:
    name: Train model
    needs:
      - start-runner
      - download-data
    runs-on: ${{ needs.start-runner.outputs.label }}
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        MODEL_COORDINATES: [150]
        MODEL_NUMBER_OF_HEADS: [15]  # note that coordinates must be divisible by these
        MODEL_NUMBER_OF_BLOCKS: [50, 25, 15, 10, 5, 3]
        MODEL_TOKENS: [50263]
        MODEL_BIAS: [false]
        MODEL_ATTENTION: ["metric"]
        MODEL_WORDS: [312]

        TRAIN_BATCH_SIZE: [300, 250, 200, 150, 100, 50, 15]
        TRAIN_NUMBER_OF_EPOCHS: [1]
        TRAIN_WARMUP_STEPS: [200]
        TRAIN_L1_REGULARIZATION: [0]
        TRAIN_L2_REGULARIZATION: [0]
    services:
      mlflow:
        image: ghcr.io/digital-defiance/mlflow:main
        env:
          MLFLOW_BACKEND_STORE_URI: ${{ secrets.DB_URI }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MLFLOW_ARTIFACTS_DESTINATION: s3://digitaldefiancemlartifacts
          MLFLOW_HOST: 0.0.0.0
          MLFLOW_PORT: 80
      redis:
        image: redis:5.0.0
        options: --memory=1g --cpus 1  --log-driver=awslogs --log-opt awslogs-region=eu-south-1 --log-opt awslogs-group=redis  --log-opt awslogs-create-group=true
      celery-worker:
        image: ghcr.io/digital-defiance/data-worker:main
        options: --memory=6g --cpus 3 --log-driver=awslogs --log-opt awslogs-region=eu-south-1 --log-opt awslogs-group=dataworker  --log-opt awslogs-create-group=true 
        env:
          REDIS_HOST: redis
          TRAIN_N_SLICES: 60
          SPARK_DRIVER_MEMORY: 2g
          SPARK_EXECUTOR_MEMORY: 2g
        volumes:
          - /data:/data
    container:
      image: ghcr.io/digital-defiance/training-loop-worker:main
      options: --gpus all --cpus 1 --memory=9g  --log-driver=awslogs --log-opt awslogs-region=eu-south-1 --log-opt awslogs-group=trainingloop  --log-opt awslogs-create-group=true
      env:
        REDIS_HOST: redis

        MODEL_COORDINATES: ${{ matrix.MODEL_COORDINATES }}
        MODEL_NUMBER_OF_BLOCKS: ${{ matrix.MODEL_NUMBER_OF_BLOCKS }}
        MODEL_NUMBER_OF_HEADS: ${{ matrix.MODEL_NUMBER_OF_HEADS }}
        MODEL_WORDS:  ${{ matrix.MODEL_WORDS }}
        MODEL_TOKENS: ${{ matrix.MODEL_TOKENS }}
        MODEL_BIAS: ${{ matrix.MODEL_BIAS }}
        MODEL_ATTENTION: ${{ matrix.MODEL_ATTENTION }}

        TRAIN_BATCH_SIZE: ${{ matrix.TRAIN_BATCH_SIZE }}
        TRAIN_NUMBER_OF_EPOCHS: ${{ matrix.TRAIN_NUMBER_OF_EPOCHS }}
        TRAIN_L1_REGULARIZATION: ${{ matrix.TRAIN_L1_REGULARIZATION }}
        TRAIN_L2_REGULARIZATION: ${{ matrix.TRAIN_L2_REGULARIZATION }}
        TRAIN_WARMUP_STEPS: ${{ matrix.TRAIN_WARMUP_STEPS }}

        MLFLOW_EXPERIMENT_ID: 1
        MLFLOW_TRACKING_URI: "http://mlflow:80"
        # MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        # MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
  
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}

        GIT_PYTHON_REFRESH: quiet
    steps:
      - name: Check if container sees gpu
        run: nvidia-smi
      - name: Check if torch sees cuda
        shell: python
        run: |
          import torch
          if not torch.cuda.is_available():
              print("Torch does not see cuda")
              exit(1)
          print("Torch sees cuda")
      - name: Check if redis is available
        shell: python
        run: |
          import redis
          r = redis.Redis(host='redis', port=6379, db=0)
          try:
              r.ping()
              print("Redis is available")
          except redis.exceptions.ConnectionError:
              print("Failed to connect to Redis")
              exit(1)

      - uses: actions/checkout@v3
      # - name: Test celery worker
      #  run: cd data && python test.py
      - name: Run training loop
        run: python -m train.sentiment_analysis


  stop-runner:
    name: Stop EC2 Spot instance
    needs:
      - start-runner # required to get output from the start-runner job
      - training-loop # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Stop EC2 runner
        uses: digital-defiance/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
