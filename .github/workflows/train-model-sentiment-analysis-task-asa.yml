name: "train-model: Sentiment Analysis Amazon Reviews @ EC2 Spot"
on:
  workflow_dispatch:

env:
  AWS_REGION: eu-south-1
 
jobs:
  start-runner:
    name: "Start EC2 Spot Instance: g4dn.xlarge"
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ env.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: digital-defiance/ec2-github-runner@feature/add-storage-option
        with:
          mode: start
          root-volume-size: 50
          iam-role-name: ec2-logs
          pre-runner-script: |  # sudo yum update -y && sudo yum install docker git libicu -y
              sudo systemctl enable docker
              sudo systemctl start docker
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          market-type: spot
          ec2-image-id: ami-04251dba4c4572e05  # base = ami-02fbad1683bc61f9f
          ec2-instance-type: g4dn.xlarge
          subnet-id: subnet-0fc7dea0969cca860
          security-group-id: sg-0c4cc0c0be64f1b08

  download-data:
    name: Download data
    needs: start-runner 
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    steps:
      - name: Download data
        run: |
          mkdir /data
          curl -L https://github.com/Digital-Defiance/llm-voice-chat/releases/download/asa-v0.2.0/test.parquet -o /data/test.parquet
          curl -L https://github.com/Digital-Defiance/llm-voice-chat/releases/download/asa-v0.2.0/train.parquet -o /data/train.parquet

  clone-repo:
    name: Clone repository
    needs: start-runner 
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          depth: 0

  pull-images:
    name: Pull image
    needs: start-runner 
    runs-on: ${{ needs.start-runner.outputs.label }}
    strategy:
      fail-fast: true 
      matrix:
        IMAGE: ["ghcr.io/digital-defiance/data-worker:main", "ghcr.io/digital-defiance/mlflow:main", "ghcr.io/digital-defiance/training-loop-worker:main", "redis:5.0.0"]
    steps:
      - name: Pull ${{ matrix.IMAGE }}
        run: docker pull ${{ matrix.IMAGE }} 

  training-loop-worker:
    name: Train and evaluate model
    needs:
      - start-runner
      - download-data
      - clone-repo
      - pull-images
    runs-on: ${{ needs.start-runner.outputs.label }}
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        MODEL_COORDINATES: [50]
        MODEL_NUMBER_OF_HEADS: [10]  # note that coordinates must be divisible by these
        MODEL_NUMBER_OF_BLOCKS: [3, 6, 9, 12]
        MODEL_TOKENS: [50263]
        MODEL_BIAS: [false]
        MODEL_ATTENTION: ["metric"]
        MODEL_WORDS: [100]

        TRAIN_BATCH_SIZE: [2] # This is using gradient accumulation, batch size of 1 = 32 data points
        TRAIN_NUMBER_OF_EPOCHS: [1]
        TRAIN_WARMUP_STEPS: [4000] # same value and same schedule as in the attention all you need paper
        TRAIN_L1_REGULARIZATION: [0]
        TRAIN_L2_REGULARIZATION: [0]
        TRAIN_NUMBER_OF_SLICES: [5]

    services:
      mlflow:
        image: ghcr.io/digital-defiance/mlflow:main
        env:
          MLFLOW_BACKEND_STORE_URI: ${{ secrets.DB_URI }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MLFLOW_ARTIFACTS_DESTINATION: s3://digitaldefiancemlartifacts
          MLFLOW_HOST: 0.0.0.0
          MLFLOW_PORT: 80
      redis:
        image: redis:5.0.0
        env:
          REDIS_ARGS: "--client-output-buffer-limit normal 0 0 0 --client-output-buffer-limit replica 256mb 64mb 60 --client-output-buffer-limit pubsub 1000mb 2000mb 500"
        options: --memory=3g --cpus 1  --log-driver=awslogs --log-opt awslogs-region=eu-south-1 --log-opt awslogs-group=redis-queue --log-opt awslogs-create-group=true
      data-worker:
        image: ghcr.io/digital-defiance/data-worker:main
        options: --memory=10g --cpus 3 --log-driver=awslogs --log-opt awslogs-region=eu-south-1 --log-opt awslogs-group=dataworker  --log-opt awslogs-create-group=true 
        env:
          TRAIN_N_SLICES: 60
          SPARK_DRIVER_MEMORY: 5g
          SPARK_EXECUTOR_MEMORY: 5g
        volumes:
          - /data:/data
          - ${{ github.workspace }}:/app
    container:
      image: ghcr.io/digital-defiance/training-loop-worker:main
      options: --gpus all --cpus 1 --memory=6g  --log-driver=awslogs --log-opt awslogs-region=eu-south-1 --log-opt awslogs-group=trainingloop  --log-opt awslogs-create-group=true
      volumes:
        - /data:/data
        - ${{ github.workspace }}:/app
      env:
        MODEL_COORDINATES: ${{ matrix.MODEL_COORDINATES }}
        MODEL_NUMBER_OF_BLOCKS: ${{ matrix.MODEL_NUMBER_OF_BLOCKS }}
        MODEL_NUMBER_OF_HEADS: ${{ matrix.MODEL_NUMBER_OF_HEADS }}
        MODEL_WORDS:  ${{ matrix.MODEL_WORDS }}
        MODEL_TOKENS: ${{ matrix.MODEL_TOKENS }}
        MODEL_BIAS: ${{ matrix.MODEL_BIAS }}
        MODEL_ATTENTION: ${{ matrix.MODEL_ATTENTION }}

        TRAIN_BATCH_SIZE: ${{ matrix.TRAIN_BATCH_SIZE }}
        TRAIN_NUMBER_OF_EPOCHS: ${{ matrix.TRAIN_NUMBER_OF_EPOCHS }}
        TRAIN_NUMBER_OF_SLICES: ${{ matrix.TRAIN_NUMBER_OF_SLICES }}
        TRAIN_L1_REGULARIZATION: ${{ matrix.TRAIN_L1_REGULARIZATION }}
        TRAIN_L2_REGULARIZATION: ${{ matrix.TRAIN_L2_REGULARIZATION }}
        TRAIN_WARMUP_STEPS: ${{ matrix.TRAIN_WARMUP_STEPS }}

        MLFLOW_EXPERIMENT_ID: 1
        MLFLOW_TRACKING_URI: "http://mlflow:80"
        MLFLOW_RUN_NAME: ${{ github.sha }}
  
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}

        GIT_PYTHON_REFRESH: quiet
    steps:
      - name: Check if container sees gpu
        run: nvidia-smi
      - name: Run training loop
        run: python -m train.sentiment_analysis
      - name: Evaluate model
        run: echo "Not implemented."

  stop-runner:
    name: Stop EC2 Spot instance
    needs:
      - start-runner
      - training-loop-worker
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Stop EC2 runner
        uses: digital-defiance/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
